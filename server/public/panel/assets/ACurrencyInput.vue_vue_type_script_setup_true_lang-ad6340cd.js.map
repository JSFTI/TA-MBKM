{"version":3,"file":"ACurrencyInput.vue_vue_type_script_setup_true_lang-ad6340cd.js","sources":["../../../../node_modules/.pnpm/vue-currency-input@3.0.3_vue@3.2.45/node_modules/vue-currency-input/dist/index.mjs","../../../../panel/src/components/CustomInput/ACurrencyInput.vue"],"sourcesContent":["/**\n * Vue Currency Input 3.0.3\n * (c) 2018-2022 Matthias Stiller\n * @license MIT\n */\nimport { ref, getCurrentInstance, version, computed, watch } from 'vue';\n\nvar CurrencyDisplay;\n(function (CurrencyDisplay) {\n    CurrencyDisplay[\"symbol\"] = \"symbol\";\n    CurrencyDisplay[\"narrowSymbol\"] = \"narrowSymbol\";\n    CurrencyDisplay[\"code\"] = \"code\";\n    CurrencyDisplay[\"name\"] = \"name\";\n    CurrencyDisplay[\"hidden\"] = \"hidden\";\n})(CurrencyDisplay || (CurrencyDisplay = {}));\nvar ValueScaling;\n(function (ValueScaling) {\n    ValueScaling[\"precision\"] = \"precision\";\n    ValueScaling[\"thousands\"] = \"thousands\";\n    ValueScaling[\"millions\"] = \"millions\";\n    ValueScaling[\"billions\"] = \"billions\";\n})(ValueScaling || (ValueScaling = {}));\n\nconst escapeRegExp = (str) => {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\nconst removeLeadingZeros = (str) => {\n    return str.replace(/^0+(0$|[^0])/, '$1');\n};\nconst count = (str, search) => {\n    return (str.match(new RegExp(escapeRegExp(search), 'g')) || []).length;\n};\nconst substringBefore = (str, search) => {\n    return str.substring(0, str.indexOf(search));\n};\n\nconst DECIMAL_SEPARATORS = [',', '.', 'Ù«'];\nconst INTEGER_PATTERN = '(0|[1-9]\\\\d*)';\nclass CurrencyFormat {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f;\n        const { currency, currencyDisplay, locale, precision, accountingSign, useGrouping } = options;\n        this.locale = locale;\n        this.options = {\n            currency,\n            useGrouping,\n            style: 'currency',\n            currencySign: accountingSign ? 'accounting' : undefined,\n            currencyDisplay: currencyDisplay !== CurrencyDisplay.hidden ? currencyDisplay : undefined\n        };\n        const numberFormat = new Intl.NumberFormat(locale, this.options);\n        const formatParts = numberFormat.formatToParts(123456);\n        this.currency = (_a = formatParts.find(({ type }) => type === 'currency')) === null || _a === void 0 ? void 0 : _a.value;\n        this.digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((i) => i.toLocaleString(locale));\n        this.decimalSymbol = (_b = formatParts.find(({ type }) => type === 'decimal')) === null || _b === void 0 ? void 0 : _b.value;\n        this.groupingSymbol = (_c = formatParts.find(({ type }) => type === 'group')) === null || _c === void 0 ? void 0 : _c.value;\n        this.minusSign = (_d = numberFormat.formatToParts(-1).find(({ type }) => type === 'minusSign')) === null || _d === void 0 ? void 0 : _d.value;\n        if (this.decimalSymbol === undefined) {\n            this.minimumFractionDigits = this.maximumFractionDigits = 0;\n        }\n        else if (typeof precision === 'number') {\n            this.minimumFractionDigits = this.maximumFractionDigits = precision;\n        }\n        else {\n            this.minimumFractionDigits = (_e = precision === null || precision === void 0 ? void 0 : precision.min) !== null && _e !== void 0 ? _e : numberFormat.resolvedOptions().minimumFractionDigits;\n            this.maximumFractionDigits = (_f = precision === null || precision === void 0 ? void 0 : precision.max) !== null && _f !== void 0 ? _f : numberFormat.resolvedOptions().maximumFractionDigits;\n        }\n        const getPrefix = (str) => {\n            return substringBefore(str, this.digits[1]);\n        };\n        const getSuffix = (str) => {\n            return str.substring(str.lastIndexOf(this.decimalSymbol ? this.digits[0] : this.digits[1]) + 1);\n        };\n        this.prefix = getPrefix(numberFormat.format(1));\n        this.suffix = getSuffix(numberFormat.format(1));\n        this.negativePrefix = getPrefix(numberFormat.format(-1));\n        this.negativeSuffix = getSuffix(numberFormat.format(-1));\n    }\n    parse(str) {\n        if (str) {\n            const negative = this.isNegative(str);\n            str = this.normalizeDigits(str);\n            str = this.stripCurrency(str, negative);\n            str = this.stripSignLiterals(str);\n            const fraction = this.decimalSymbol ? `(?:${escapeRegExp(this.decimalSymbol)}(\\\\d*))?` : '';\n            const match = this.stripGroupingSeparator(str).match(new RegExp(`^${INTEGER_PATTERN}${fraction}$`));\n            if (match && this.isValidIntegerFormat(this.decimalSymbol ? str.split(this.decimalSymbol)[0] : str, Number(match[1]))) {\n                return Number(`${negative ? '-' : ''}${this.onlyDigits(match[1])}.${this.onlyDigits(match[2] || '')}`);\n            }\n        }\n        return null;\n    }\n    isValidIntegerFormat(formattedNumber, integerNumber) {\n        const options = { ...this.options, minimumFractionDigits: 0 };\n        return [\n            this.stripCurrency(this.normalizeDigits(integerNumber.toLocaleString(this.locale, { ...options, useGrouping: true })), false),\n            this.stripCurrency(this.normalizeDigits(integerNumber.toLocaleString(this.locale, { ...options, useGrouping: false })), false)\n        ].includes(formattedNumber);\n    }\n    format(value, options = {\n        minimumFractionDigits: this.minimumFractionDigits,\n        maximumFractionDigits: this.maximumFractionDigits\n    }) {\n        return value != null ? value.toLocaleString(this.locale, { ...this.options, ...options }) : '';\n    }\n    toFraction(str) {\n        return `${this.digits[0]}${this.decimalSymbol}${this.onlyLocaleDigits(str.substr(1)).substr(0, this.maximumFractionDigits)}`;\n    }\n    isFractionIncomplete(str) {\n        return !!this.normalizeDigits(this.stripGroupingSeparator(str)).match(new RegExp(`^${INTEGER_PATTERN}${escapeRegExp(this.decimalSymbol)}$`));\n    }\n    isNegative(str) {\n        return (str.startsWith(this.negativePrefix) ||\n            (this.minusSign === undefined && (str.startsWith('(') || str.startsWith('-'))) ||\n            (this.minusSign !== undefined && str.replace('-', this.minusSign).startsWith(this.minusSign)));\n    }\n    insertCurrency(str, negative) {\n        return `${negative ? this.negativePrefix : this.prefix}${str}${negative ? this.negativeSuffix : this.suffix}`;\n    }\n    stripGroupingSeparator(str) {\n        return this.groupingSymbol !== undefined ? str.replace(new RegExp(escapeRegExp(this.groupingSymbol), 'g'), '') : str;\n    }\n    stripSignLiterals(str) {\n        if (this.minusSign !== undefined) {\n            return str.replace('-', this.minusSign).replace(this.minusSign, '');\n        }\n        else {\n            return str.replace(/[-()]/g, '');\n        }\n    }\n    stripCurrency(str, negative) {\n        return str.replace(negative ? this.negativePrefix : this.prefix, '').replace(negative ? this.negativeSuffix : this.suffix, '');\n    }\n    normalizeDecimalSeparator(str, from) {\n        DECIMAL_SEPARATORS.forEach((s) => {\n            str = str.substr(0, from) + str.substr(from).replace(s, this.decimalSymbol);\n        });\n        return str;\n    }\n    normalizeDigits(str) {\n        if (this.digits[0] !== '0') {\n            this.digits.forEach((digit, index) => {\n                str = str.replace(new RegExp(digit, 'g'), String(index));\n            });\n        }\n        return str;\n    }\n    onlyDigits(str) {\n        return this.normalizeDigits(str).replace(/\\D+/g, '');\n    }\n    onlyLocaleDigits(str) {\n        return str.replace(new RegExp(`[^${this.digits.join('')}]*`, 'g'), '');\n    }\n}\n\nclass AbstractInputMask {\n    constructor(currencyFormat) {\n        this.currencyFormat = currencyFormat;\n    }\n}\nclass DefaultInputMask extends AbstractInputMask {\n    conformToMask(str, previousConformedValue = '') {\n        const negative = this.currencyFormat.isNegative(str);\n        const isEmptyNegativeValue = (str) => str === '' &&\n            negative &&\n            !(this.currencyFormat.minusSign === undefined\n                ? previousConformedValue === this.currencyFormat.negativePrefix + this.currencyFormat.negativeSuffix\n                : previousConformedValue === this.currencyFormat.negativePrefix);\n        const checkIncompleteValue = (str) => {\n            if (isEmptyNegativeValue(str)) {\n                return '';\n            }\n            else if (this.currencyFormat.maximumFractionDigits > 0) {\n                if (this.currencyFormat.isFractionIncomplete(str)) {\n                    return str;\n                }\n                else if (str.startsWith(this.currencyFormat.decimalSymbol)) {\n                    return this.currencyFormat.toFraction(str);\n                }\n            }\n            return null;\n        };\n        let value = str;\n        value = this.currencyFormat.stripCurrency(value, negative);\n        value = this.currencyFormat.stripSignLiterals(value);\n        const incompleteValue = checkIncompleteValue(value);\n        if (incompleteValue != null) {\n            return this.currencyFormat.insertCurrency(incompleteValue, negative);\n        }\n        const [integer, ...fraction] = value.split(this.currencyFormat.decimalSymbol);\n        const integerDigits = removeLeadingZeros(this.currencyFormat.onlyDigits(integer));\n        const fractionDigits = this.currencyFormat.onlyDigits(fraction.join('')).substr(0, this.currencyFormat.maximumFractionDigits);\n        const invalidFraction = fraction.length > 0 && fractionDigits.length === 0;\n        const invalidNegativeValue = integerDigits === '' &&\n            negative &&\n            (this.currencyFormat.minusSign === undefined\n                ? previousConformedValue === str.slice(0, -2) + this.currencyFormat.negativeSuffix\n                : previousConformedValue === str.slice(0, -1));\n        if (invalidFraction || invalidNegativeValue || isEmptyNegativeValue(integerDigits)) {\n            return previousConformedValue;\n        }\n        else if (integerDigits.match(/\\d+/)) {\n            return {\n                numberValue: Number(`${negative ? '-' : ''}${integerDigits}.${fractionDigits}`),\n                fractionDigits\n            };\n        }\n        else {\n            return '';\n        }\n    }\n}\nclass AutoDecimalDigitsInputMask extends AbstractInputMask {\n    conformToMask(str, previousConformedValue = '') {\n        if (str === '' ||\n            (this.currencyFormat.parse(previousConformedValue) === 0 &&\n                this.currencyFormat.stripCurrency(previousConformedValue, true).slice(0, -1) === this.currencyFormat.stripCurrency(str, true))) {\n            return '';\n        }\n        const negative = this.currencyFormat.isNegative(str);\n        const numberValue = this.currencyFormat.stripSignLiterals(str) === ''\n            ? -0\n            : Number(`${negative ? '-' : ''}${removeLeadingZeros(this.currencyFormat.onlyDigits(str))}`) / Math.pow(10, this.currencyFormat.maximumFractionDigits);\n        return {\n            numberValue,\n            fractionDigits: numberValue.toFixed(this.currencyFormat.maximumFractionDigits).slice(-this.currencyFormat.maximumFractionDigits)\n        };\n    }\n}\n\nconst DEFAULT_OPTIONS = {\n    locale: undefined,\n    currency: undefined,\n    currencyDisplay: undefined,\n    hideGroupingSeparatorOnFocus: true,\n    hideCurrencySymbolOnFocus: true,\n    hideNegligibleDecimalDigitsOnFocus: true,\n    precision: undefined,\n    autoDecimalDigits: false,\n    valueRange: undefined,\n    useGrouping: undefined,\n    valueScaling: undefined\n};\nclass CurrencyInput {\n    constructor(args) {\n        this.el = args.el;\n        this.onInput = args.onInput;\n        this.onChange = args.onChange;\n        this.addEventListener();\n        this.init(args.options);\n    }\n    setOptions(options) {\n        this.init(options);\n        this.applyFixedFractionFormat(this.numberValue, true);\n    }\n    getValue() {\n        const numberValue = this.valueScaling && this.numberValue != null ? this.toInteger(this.numberValue, this.valueScaling) : this.numberValue;\n        return { number: numberValue, formatted: this.formattedValue };\n    }\n    setValue(value) {\n        const newValue = this.valueScaling !== undefined && value != null ? this.toFloat(value, this.valueScaling) : value;\n        if (newValue !== this.numberValue) {\n            this.applyFixedFractionFormat(newValue);\n        }\n    }\n    init(options) {\n        this.options = {\n            ...DEFAULT_OPTIONS,\n            ...options\n        };\n        if (this.options.autoDecimalDigits) {\n            this.options.hideNegligibleDecimalDigitsOnFocus = false;\n            this.el.setAttribute('inputmode', 'numeric');\n        }\n        else {\n            this.el.setAttribute('inputmode', 'decimal');\n        }\n        this.currencyFormat = new CurrencyFormat(this.options);\n        this.numberMask = this.options.autoDecimalDigits ? new AutoDecimalDigitsInputMask(this.currencyFormat) : new DefaultInputMask(this.currencyFormat);\n        const valueScalingOptions = {\n            [ValueScaling.precision]: this.currencyFormat.maximumFractionDigits,\n            [ValueScaling.thousands]: 3,\n            [ValueScaling.millions]: 6,\n            [ValueScaling.billions]: 9\n        };\n        this.valueScaling = this.options.valueScaling ? valueScalingOptions[this.options.valueScaling] : undefined;\n        this.valueScalingFractionDigits =\n            this.valueScaling !== undefined && this.options.valueScaling !== ValueScaling.precision\n                ? this.valueScaling + this.currencyFormat.maximumFractionDigits\n                : this.currencyFormat.maximumFractionDigits;\n        this.minValue = this.getMinValue();\n        this.maxValue = this.getMaxValue();\n    }\n    getMinValue() {\n        var _a, _b;\n        let min = this.toFloat(-Number.MAX_SAFE_INTEGER);\n        if (((_a = this.options.valueRange) === null || _a === void 0 ? void 0 : _a.min) !== undefined) {\n            min = Math.max((_b = this.options.valueRange) === null || _b === void 0 ? void 0 : _b.min, this.toFloat(-Number.MAX_SAFE_INTEGER));\n        }\n        return min;\n    }\n    getMaxValue() {\n        var _a, _b;\n        let max = this.toFloat(Number.MAX_SAFE_INTEGER);\n        if (((_a = this.options.valueRange) === null || _a === void 0 ? void 0 : _a.max) !== undefined) {\n            max = Math.min((_b = this.options.valueRange) === null || _b === void 0 ? void 0 : _b.max, this.toFloat(Number.MAX_SAFE_INTEGER));\n        }\n        return max;\n    }\n    toFloat(value, maxFractionDigits) {\n        return value / Math.pow(10, maxFractionDigits !== null && maxFractionDigits !== void 0 ? maxFractionDigits : this.valueScalingFractionDigits);\n    }\n    toInteger(value, maxFractionDigits) {\n        return Number(value\n            .toFixed(maxFractionDigits !== null && maxFractionDigits !== void 0 ? maxFractionDigits : this.valueScalingFractionDigits)\n            .split('.')\n            .join(''));\n    }\n    validateValueRange(value) {\n        return value != null ? Math.min(Math.max(value, this.minValue), this.maxValue) : value;\n    }\n    applyFixedFractionFormat(number, forcedChange = false) {\n        this.format(this.currencyFormat.format(this.validateValueRange(number)));\n        if (number !== this.numberValue || forcedChange) {\n            this.onChange(this.getValue());\n        }\n    }\n    format(value, hideNegligibleDecimalDigits = false) {\n        if (value != null) {\n            if (this.decimalSymbolInsertedAt !== undefined) {\n                value = this.currencyFormat.normalizeDecimalSeparator(value, this.decimalSymbolInsertedAt);\n                this.decimalSymbolInsertedAt = undefined;\n            }\n            const conformedValue = this.numberMask.conformToMask(value, this.formattedValue);\n            let formattedValue;\n            if (typeof conformedValue === 'object') {\n                const { numberValue, fractionDigits } = conformedValue;\n                let { maximumFractionDigits, minimumFractionDigits } = this.currencyFormat;\n                if (this.focus) {\n                    minimumFractionDigits = hideNegligibleDecimalDigits\n                        ? fractionDigits.replace(/0+$/, '').length\n                        : Math.min(maximumFractionDigits, fractionDigits.length);\n                }\n                else if (Number.isInteger(numberValue) && !this.options.autoDecimalDigits && (this.options.precision === undefined || minimumFractionDigits === 0)) {\n                    minimumFractionDigits = maximumFractionDigits = 0;\n                }\n                formattedValue =\n                    this.toInteger(Math.abs(numberValue)) > Number.MAX_SAFE_INTEGER\n                        ? this.formattedValue\n                        : this.currencyFormat.format(numberValue, {\n                            useGrouping: this.options.useGrouping !== false && !(this.focus && this.options.hideGroupingSeparatorOnFocus),\n                            minimumFractionDigits,\n                            maximumFractionDigits\n                        });\n            }\n            else {\n                formattedValue = conformedValue;\n            }\n            if (this.maxValue <= 0 && !this.currencyFormat.isNegative(formattedValue) && this.currencyFormat.parse(formattedValue) !== 0) {\n                formattedValue = formattedValue.replace(this.currencyFormat.prefix, this.currencyFormat.negativePrefix);\n            }\n            if (this.minValue >= 0) {\n                formattedValue = formattedValue.replace(this.currencyFormat.negativePrefix, this.currencyFormat.prefix);\n            }\n            if (this.options.currencyDisplay === CurrencyDisplay.hidden || (this.focus && this.options.hideCurrencySymbolOnFocus)) {\n                formattedValue = formattedValue\n                    .replace(this.currencyFormat.negativePrefix, this.currencyFormat.minusSign !== undefined ? this.currencyFormat.minusSign : '(')\n                    .replace(this.currencyFormat.negativeSuffix, this.currencyFormat.minusSign !== undefined ? '' : ')')\n                    .replace(this.currencyFormat.prefix, '')\n                    .replace(this.currencyFormat.suffix, '');\n            }\n            this.el.value = formattedValue;\n            this.numberValue = this.currencyFormat.parse(formattedValue);\n        }\n        else {\n            this.el.value = '';\n            this.numberValue = null;\n        }\n        this.formattedValue = this.el.value;\n        this.onInput(this.getValue());\n    }\n    addEventListener() {\n        this.el.addEventListener('input', (e) => {\n            const { value, selectionStart } = this.el;\n            const inputEvent = e;\n            if (selectionStart && inputEvent.data && DECIMAL_SEPARATORS.includes(inputEvent.data)) {\n                this.decimalSymbolInsertedAt = selectionStart - 1;\n            }\n            this.format(value);\n            if (this.focus && selectionStart != null) {\n                const getCaretPositionAfterFormat = () => {\n                    const { prefix, suffix, decimalSymbol, maximumFractionDigits, groupingSymbol } = this.currencyFormat;\n                    let caretPositionFromLeft = value.length - selectionStart;\n                    const newValueLength = this.formattedValue.length;\n                    if (this.currencyFormat.minusSign === undefined && (value.startsWith('(') || value.startsWith('-')) && !value.endsWith(')')) {\n                        return newValueLength - this.currencyFormat.negativeSuffix.length > 1 ? this.formattedValue.substring(selectionStart).length : 1;\n                    }\n                    if (this.formattedValue.substr(selectionStart, 1) === groupingSymbol &&\n                        count(this.formattedValue, groupingSymbol) === count(value, groupingSymbol) + 1) {\n                        return newValueLength - caretPositionFromLeft - 1;\n                    }\n                    if (newValueLength < caretPositionFromLeft) {\n                        return selectionStart;\n                    }\n                    if (decimalSymbol !== undefined && value.indexOf(decimalSymbol) !== -1) {\n                        const decimalSymbolPosition = value.indexOf(decimalSymbol) + 1;\n                        if (Math.abs(newValueLength - value.length) > 1 && selectionStart <= decimalSymbolPosition) {\n                            return this.formattedValue.indexOf(decimalSymbol) + 1;\n                        }\n                        else {\n                            if (!this.options.autoDecimalDigits && selectionStart > decimalSymbolPosition) {\n                                if (this.currencyFormat.onlyDigits(value.substr(decimalSymbolPosition)).length - 1 === maximumFractionDigits) {\n                                    caretPositionFromLeft -= 1;\n                                }\n                            }\n                        }\n                    }\n                    return this.options.hideCurrencySymbolOnFocus || this.options.currencyDisplay === CurrencyDisplay.hidden\n                        ? newValueLength - caretPositionFromLeft\n                        : Math.max(newValueLength - Math.max(caretPositionFromLeft, suffix.length), prefix.length);\n                };\n                this.setCaretPosition(getCaretPositionAfterFormat());\n            }\n        });\n        this.el.addEventListener('focus', () => {\n            this.focus = true;\n            setTimeout(() => {\n                const { value, selectionStart, selectionEnd } = this.el;\n                this.format(value, this.options.hideNegligibleDecimalDigitsOnFocus);\n                if (selectionStart != null && selectionEnd != null && Math.abs(selectionStart - selectionEnd) > 0) {\n                    this.setCaretPosition(0, this.el.value.length);\n                }\n                else if (selectionStart != null) {\n                    const caretPositionOnFocus = this.getCaretPositionOnFocus(value, selectionStart);\n                    this.setCaretPosition(caretPositionOnFocus);\n                }\n            });\n        });\n        this.el.addEventListener('blur', () => {\n            this.focus = false;\n            this.applyFixedFractionFormat(this.numberValue);\n        });\n        this.el.addEventListener('change', () => {\n            this.onChange(this.getValue());\n        });\n    }\n    getCaretPositionOnFocus(value, selectionStart) {\n        if (this.numberValue == null) {\n            return selectionStart;\n        }\n        const { prefix, negativePrefix, suffix, negativeSuffix, groupingSymbol, currency } = this.currencyFormat;\n        const isNegative = this.numberValue < 0;\n        const currentPrefix = isNegative ? negativePrefix : prefix;\n        const prefixLength = currentPrefix.length;\n        if (this.options.hideCurrencySymbolOnFocus || this.options.currencyDisplay === CurrencyDisplay.hidden) {\n            if (isNegative) {\n                if (selectionStart <= 1) {\n                    return 1;\n                }\n                else if (value.endsWith(')') && selectionStart > value.indexOf(')')) {\n                    return this.formattedValue.length - 1;\n                }\n            }\n        }\n        else {\n            const suffixLength = isNegative ? negativeSuffix.length : suffix.length;\n            if (selectionStart >= value.length - suffixLength) {\n                return this.formattedValue.length - suffixLength;\n            }\n            else if (selectionStart < prefixLength) {\n                return prefixLength;\n            }\n        }\n        let result = selectionStart;\n        if (this.options.hideCurrencySymbolOnFocus &&\n            this.options.currencyDisplay !== CurrencyDisplay.hidden &&\n            selectionStart >= prefixLength &&\n            currency !== undefined &&\n            currentPrefix.includes(currency)) {\n            result -= prefixLength;\n            if (isNegative) {\n                result += 1;\n            }\n        }\n        if (this.options.hideGroupingSeparatorOnFocus && groupingSymbol !== undefined) {\n            result -= count(value.substring(0, selectionStart), groupingSymbol);\n        }\n        return result;\n    }\n    setCaretPosition(start, end = start) {\n        this.el.setSelectionRange(start, end);\n    }\n}\n\nconst findInput = (el) => ((el === null || el === void 0 ? void 0 : el.matches('input')) ? el : el === null || el === void 0 ? void 0 : el.querySelector('input'));\nfunction useCurrencyInput(options, autoEmit) {\n    var _a, _b, _c, _d;\n    let currencyInput;\n    const inputRef = ref(null);\n    const formattedValue = ref(null);\n    const numberValue = ref(null);\n    const vm = getCurrentInstance();\n    const emit = (vm === null || vm === void 0 ? void 0 : vm.emit) || ((_b = (_a = vm === null || vm === void 0 ? void 0 : vm.proxy) === null || _a === void 0 ? void 0 : _a.$emit) === null || _b === void 0 ? void 0 : _b.bind(vm === null || vm === void 0 ? void 0 : vm.proxy));\n    const props = ((vm === null || vm === void 0 ? void 0 : vm.props) || ((_c = vm === null || vm === void 0 ? void 0 : vm.proxy) === null || _c === void 0 ? void 0 : _c.$props));\n    const isVue3 = version.startsWith('3');\n    const lazyModel = isVue3 && ((_d = vm === null || vm === void 0 ? void 0 : vm.attrs.modelModifiers) === null || _d === void 0 ? void 0 : _d.lazy);\n    const modelValue = computed(() => props === null || props === void 0 ? void 0 : props[isVue3 ? 'modelValue' : 'value']);\n    const inputEvent = isVue3 ? 'update:modelValue' : 'input';\n    const changeEvent = lazyModel ? 'update:modelValue' : 'change';\n    watch(inputRef, (value) => {\n        var _a;\n        if (value) {\n            const el = findInput((_a = value === null || value === void 0 ? void 0 : value.$el) !== null && _a !== void 0 ? _a : value);\n            if (el) {\n                currencyInput = new CurrencyInput({\n                    el,\n                    options,\n                    onInput: (value) => {\n                        if (!lazyModel && autoEmit !== false && modelValue.value !== value.number) {\n                            emit === null || emit === void 0 ? void 0 : emit(inputEvent, value.number);\n                        }\n                        numberValue.value = value.number;\n                        formattedValue.value = value.formatted;\n                    },\n                    onChange: (value) => {\n                        emit === null || emit === void 0 ? void 0 : emit(changeEvent, value.number);\n                    }\n                });\n                currencyInput.setValue(modelValue.value);\n            }\n            else {\n                console.error('No input element found. Please make sure that the \"inputRef\" template ref is properly assigned.');\n            }\n        }\n        else {\n            currencyInput = null;\n        }\n    });\n    return {\n        inputRef,\n        numberValue,\n        formattedValue,\n        setValue: (value) => currencyInput === null || currencyInput === void 0 ? void 0 : currencyInput.setValue(value),\n        setOptions: (options) => currencyInput === null || currencyInput === void 0 ? void 0 : currencyInput.setOptions(options)\n    };\n}\n\nexport { CurrencyDisplay, ValueScaling, useCurrencyInput };\n","<script setup lang=\"ts\">\nimport { useCurrencyInput } from 'vue-currency-input';\nimport type { CurrencyInputOptions } from 'vue-currency-input';\nimport type { VInput } from 'vuetify/components';\n\nconst props = defineProps({\n  config: null\n});\n\nconst { inputRef } = useCurrencyInput(props.config ?? {\n  currency: 'IDR',\n  precision: 2,\n});\n</script>\n\n<template>\n  <VTextField :ref=\"(el) => inputRef = el\" inputmode=\"numeric\" />\n</template>\n"],"names":["CurrencyDisplay","ValueScaling","escapeRegExp","str","removeLeadingZeros","count","search","substringBefore","DECIMAL_SEPARATORS","INTEGER_PATTERN","CurrencyFormat","options","_a","_b","_c","_d","_e","_f","currency","currencyDisplay","locale","precision","accountingSign","useGrouping","numberFormat","formatParts","type","i","getPrefix","getSuffix","negative","fraction","match","formattedNumber","integerNumber","value","from","s","digit","index","AbstractInputMask","currencyFormat","DefaultInputMask","previousConformedValue","isEmptyNegativeValue","checkIncompleteValue","incompleteValue","integer","integerDigits","fractionDigits","invalidFraction","invalidNegativeValue","AutoDecimalDigitsInputMask","numberValue","DEFAULT_OPTIONS","CurrencyInput","args","newValue","valueScalingOptions","min","max","maxFractionDigits","number","forcedChange","hideNegligibleDecimalDigits","conformedValue","formattedValue","maximumFractionDigits","minimumFractionDigits","e","selectionStart","inputEvent","getCaretPositionAfterFormat","prefix","suffix","decimalSymbol","groupingSymbol","caretPositionFromLeft","newValueLength","decimalSymbolPosition","selectionEnd","caretPositionOnFocus","negativePrefix","negativeSuffix","isNegative","currentPrefix","prefixLength","suffixLength","result","start","end","findInput","el","useCurrencyInput","autoEmit","currencyInput","inputRef","ref","vm","getCurrentInstance","emit","props","isVue3","version","lazyModel","modelValue","computed","changeEvent","watch"],"mappings":"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"}