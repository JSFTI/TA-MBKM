{"version":3,"file":"index.esm-6cf26349.js","sources":["../../../../node_modules/.pnpm/@tanstack+table-core@8.7.3/node_modules/@tanstack/table-core/build/lib/index.esm.js","../../../../node_modules/.pnpm/@tanstack+vue-table@8.7.3_vue@3.2.45/node_modules/@tanstack/vue-table/build/lib/index.esm.js"],"sourcesContent":["/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n// Is this type a tuple?\n\n// If this type is a tuple, what indices are allowed?\n\n///\n\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {\n  //\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n      if (children?.length) {\n        recurse(children);\n      }\n    });\n  };\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return () => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps();\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n    if (!depsChanged) {\n      return result;\n    }\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts?.onChange?.(result);\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n        const pad = (str, num) => {\n          str = String(str);\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n          return str;\n        };\n        console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts?.key);\n      }\n    }\n    return result;\n  };\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n  const defaultColumn = table._getDefaultColumnDef();\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef\n  };\n  const accessorKey = resolvedColumnDef.accessorKey;\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : accessorKey ? accessorKey.replace('.', '_') : undefined) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = originalRow => {\n        let result = originalRow;\n        for (const key of accessorKey.split('.')) {\n          result = result[key];\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            throw new Error(`\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`);\n          }\n        }\n        return result;\n      };\n    } else {\n      accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n    }\n  }\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? `Columns require an id when using an accessorFn` : `Columns require an id when using a non-string header`);\n    }\n    throw new Error();\n  }\n  let column = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      return [column, ...column.columns?.flatMap(d => d.getFlatColumns())];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      }\n    }),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      if (column.columns?.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n      return [column];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    })\n  };\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table));\n  }, column);\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column;\n}\n\n//\n\nfunction createHeader(table, column, options) {\n  var _options$id;\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n        leafHeaders.push(h);\n      };\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table));\n  });\n  return header;\n}\nconst Headers = {\n  createTable: table => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        var _left$map$filter, _right$map$filter;\n        const leftColumns = (_left$map$filter = left?.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n        const rightColumns = (_right$map$filter = right?.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n        const centerColumns = leafColumns.filter(column => !left?.includes(column.id) && !right?.includes(column.id));\n        const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n        return headerGroups;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugHeaders;\n        }\n      }),\n      getCenterHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(column => !left?.includes(column.id) && !right?.includes(column.id));\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugHeaders;\n        }\n      }),\n      getLeftHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n        var _left$map$filter2;\n        const orderedLeafColumns = (_left$map$filter2 = left?.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugHeaders;\n        }\n      }),\n      getRightHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n        var _right$map$filter2;\n        const orderedLeafColumns = (_right$map$filter2 = right?.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => {\n          var _table$options$debugA4;\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugHeaders;\n        }\n      }),\n      // Footer Groups\n\n      getFooterGroups: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => {\n          var _table$options$debugA5;\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFooterGroups: memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => {\n          var _table$options$debugA6;\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFooterGroups: memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => {\n          var _table$options$debugA7;\n          return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugHeaders;\n        }\n      }),\n      getRightFooterGroups: memo(() => [table.getRightHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => {\n          var _table$options$debugA8;\n          return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugHeaders;\n        }\n      }),\n      // Flat Headers\n\n      getFlatHeaders: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return headerGroups.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => {\n          var _table$options$debugA9;\n          return (_table$options$debugA9 = table.options.debugAll) != null ? _table$options$debugA9 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFlatHeaders: memo(() => [table.getLeftHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => {\n          var _table$options$debugA10;\n          return (_table$options$debugA10 = table.options.debugAll) != null ? _table$options$debugA10 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFlatHeaders: memo(() => [table.getCenterHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => {\n          var _table$options$debugA11;\n          return (_table$options$debugA11 = table.options.debugAll) != null ? _table$options$debugA11 : table.options.debugHeaders;\n        }\n      }),\n      getRightFlatHeaders: memo(() => [table.getRightHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => {\n          var _table$options$debugA12;\n          return (_table$options$debugA12 = table.options.debugAll) != null ? _table$options$debugA12 : table.options.debugHeaders;\n        }\n      }),\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => {\n          var _table$options$debugA13;\n          return (_table$options$debugA13 = table.options.debugAll) != null ? _table$options$debugA13 : table.options.debugHeaders;\n        }\n      }),\n      getLeftLeafHeaders: memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => {\n          var _table$options$debugA14;\n          return (_table$options$debugA14 = table.options.debugAll) != null ? _table$options$debugA14 : table.options.debugHeaders;\n        }\n      }),\n      getRightLeafHeaders: memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => {\n          var _table$options$debugA15;\n          return (_table$options$debugA15 = table.options.debugAll) != null ? _table$options$debugA15 : table.options.debugHeaders;\n        }\n      }),\n      getLeafHeaders: memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n        var _left$0$headers, _center$0$headers, _right$0$headers;\n        return [...((_left$0$headers = left[0]?.headers) != null ? _left$0$headers : []), ...((_center$0$headers = center[0]?.headers) != null ? _center$0$headers : []), ...((_right$0$headers = right[0]?.headers) != null ? _right$0$headers : [])].map(header => {\n          return header.getLeafHeaders();\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => {\n          var _table$options$debugA16;\n          return (_table$options$debugA16 = table.options.debugAll) != null ? _table$options$debugA16 : table.options.debugHeaders;\n        }\n      })\n    };\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade;\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0;\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      if (column.columns?.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: []\n    };\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders = [];\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n      if (latestPendingParentHeader && latestPendingParentHeader?.column === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? `${pendingParentHeaders.filter(d => d.column === column).length}` : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        });\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup);\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header);\n      }\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse();\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n  recurseHeadersForSpans((_headerGroups$0$heade = headerGroups[0]?.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\n//\n\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getSize: () => {\n        var _column$columnDef$min, _ref, _column$columnDef$max;\n        const columnSize = table.getState().columnSizing[column.id];\n        return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n      },\n      getStart: position => {\n        const columns = !position ? table.getVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n        const index = columns.findIndex(d => d.id === column.id);\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1];\n          return prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize();\n        }\n        return 0;\n      },\n      resetSize: () => {\n        table.setColumnSizing(_ref2 => {\n          let {\n            [column.id]: _,\n            ...rest\n          } = _ref2;\n          return rest;\n        });\n      },\n      getCanResize: () => {\n        var _column$columnDef$ena, _table$options$enable;\n        return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id;\n      }\n    };\n  },\n  createHeader: (header, table) => {\n    return {\n      getSize: () => {\n        let sum = 0;\n        const recurse = header => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse);\n          } else {\n            var _header$column$getSiz;\n            sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n          }\n        };\n        recurse(header);\n        return sum;\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n        }\n        return 0;\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id);\n        const canResize = column.getCanResize();\n        return e => {\n          if (!canResize) {\n            return;\n          }\n          e.persist?.();\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return;\n            }\n          }\n          const startSize = header.getSize();\n          const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n          const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n          const updateOffset = (eventType, clientXPos) => {\n            if (typeof clientXPos !== 'number') {\n              return;\n            }\n            let newColumnSizing = {};\n            table.setColumnSizingInfo(old => {\n              var _old$startOffset, _old$startSize;\n              const deltaOffset = clientXPos - ((_old$startOffset = old?.startOffset) != null ? _old$startOffset : 0);\n              const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old?.startSize) != null ? _old$startSize : 0), -0.999999);\n              old.columnSizingStart.forEach(_ref3 => {\n                let [columnId, headerSize] = _ref3;\n                newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n              });\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage\n              };\n            });\n            if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing\n              }));\n            }\n          };\n          const onMove = clientXPos => updateOffset('move', clientXPos);\n          const onEnd = clientXPos => {\n            updateOffset('end', clientXPos);\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: []\n            }));\n          };\n          const mouseEvents = {\n            moveHandler: e => onMove(e.clientX),\n            upHandler: e => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler);\n              document.removeEventListener('mouseup', mouseEvents.upHandler);\n              onEnd(e.clientX);\n            }\n          };\n          const touchEvents = {\n            moveHandler: e => {\n              if (e.cancelable) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n              onMove(e.touches[0].clientX);\n              return false;\n            },\n            upHandler: e => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler);\n              document.removeEventListener('touchend', touchEvents.upHandler);\n              if (e.cancelable) {\n                e.preventDefault();\n                e.stopPropagation();\n              }\n              onEnd(e.touches[0]?.clientX);\n            }\n          };\n          const passiveIfSupported = passiveEventSupported() ? {\n            passive: false\n          } : false;\n          if (isTouchStartEvent(e)) {\n            document.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);\n          } else {\n            document.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n          }\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id\n          }));\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater => table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        var _table$initialState$c;\n        table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n      },\n      resetHeaderSizeInfo: defaultState => {\n        var _table$initialState$c2;\n        table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n      },\n      getTotalSize: () => {\n        var _table$getHeaderGroup;\n        return (_table$getHeaderGroup = table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getHeaderGroup : 0;\n      },\n      getLeftTotalSize: () => {\n        var _table$getLeftHeaderG;\n        return (_table$getLeftHeaderG = table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getLeftHeaderG : 0;\n      },\n      getCenterTotalSize: () => {\n        var _table$getCenterHeade;\n        return (_table$getCenterHeade = table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getCenterHeade : 0;\n      },\n      getRightTotalSize: () => {\n        var _table$getRightHeader;\n        return (_table$getRightHeader = table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getRightHeader : 0;\n      }\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n    };\n    const noop = () => {};\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n  passiveSupported = supported;\n  return passiveSupported;\n}\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\n\nconst Expanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetExpanded: () => {\n        var _ref, _table$options$autoRe;\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n          return;\n        }\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n          if (queued) return;\n          queued = true;\n          table._queue(() => {\n            table.resetExpanded();\n            queued = false;\n          });\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true);\n        } else {\n          table.setExpanded({});\n        }\n      },\n      resetExpanded: defaultState => {\n        var _table$initialState$e;\n        table.setExpanded(defaultState ? {} : (_table$initialState$e = table.initialState?.expanded) != null ? _table$initialState$e : {});\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand());\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return e => {\n          e.persist?.();\n          table.toggleAllRowsExpanded();\n        };\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n        return expanded === true || Object.values(expanded).some(Boolean);\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true;\n        }\n        if (!Object.keys(expanded).length) {\n          return false;\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false;\n        }\n\n        // They must all be expanded :shrug:\n        return true;\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0;\n        const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n        rowIds.forEach(id => {\n          const splitId = id.split('.');\n          maxDepth = Math.max(maxDepth, splitId.length);\n        });\n        return maxDepth;\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n        }\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel();\n        }\n        return table._getExpandedRowModel();\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          var _expanded;\n          const exists = old === true ? true : !!old?.[row.id];\n          let oldExpanded = {};\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true;\n            });\n          } else {\n            oldExpanded = old;\n          }\n          expanded = (_expanded = expanded) != null ? _expanded : !exists;\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true\n            };\n          }\n          if (exists && !expanded) {\n            const {\n              [row.id]: _,\n              ...rest\n            } = oldExpanded;\n            return rest;\n          }\n          return old;\n        });\n      },\n      getIsExpanded: () => {\n        var _table$options$getIsR;\n        const expanded = table.getState().expanded;\n        return !!((_table$options$getIsR = table.options.getIsRowExpanded?.(row)) != null ? _table$options$getIsR : expanded === true || expanded?.[row.id]);\n      },\n      getCanExpand: () => {\n        var _table$options$getRow, _table$options$enable;\n        return (_table$options$getRow = table.options.getRowCanExpand?.(row)) != null ? _table$options$getRow : ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!row.subRows?.length;\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand();\n        return () => {\n          if (!canExpand) return;\n          row.toggleExpanded();\n        };\n      }\n    };\n  }\n};\n\nconst includesString = (row, columnId, filterValue) => {\n  const search = filterValue.toLowerCase();\n  return Boolean(row.getValue(columnId)?.toLowerCase().includes(search));\n};\nincludesString.autoRemove = val => testFalsey(val);\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  return Boolean(row.getValue(columnId)?.includes(filterValue));\n};\nincludesStringSensitive.autoRemove = val => testFalsey(val);\nconst equalsString = (row, columnId, filterValue) => {\n  return row.getValue(columnId)?.toLowerCase() === filterValue.toLowerCase();\n};\nequalsString.autoRemove = val => testFalsey(val);\nconst arrIncludes = (row, columnId, filterValue) => {\n  return row.getValue(columnId)?.includes(filterValue);\n};\narrIncludes.autoRemove = val => testFalsey(val) || !val?.length;\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => !row.getValue(columnId)?.includes(val));\n};\narrIncludesAll.autoRemove = val => testFalsey(val) || !val?.length;\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => row.getValue(columnId)?.includes(val));\n};\narrIncludesSome.autoRemove = val => testFalsey(val) || !val?.length;\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\nequals.autoRemove = val => testFalsey(val);\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\nweakEquals.autoRemove = val => testFalsey(val);\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n  return [min, max];\n};\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]);\n\n// Export\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n// Utils\n\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\n\nconst Filters = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table.getCoreRowModel().flatRows[0]?._getAllCellsByColumnId()[column.id]?.getValue();\n        return typeof value === 'string' || typeof value === 'number';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow?.getValue(column.id);\n        if (typeof value === 'string') {\n          return filterFns.includesString;\n        }\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange;\n        }\n        if (typeof value === 'boolean') {\n          return filterFns.equals;\n        }\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals;\n        }\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes;\n        }\n        return filterFns.weakEquals;\n      },\n      getFilterFn: () => {\n        var _table$options$filter;\n        return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn() : // @ts-ignore\n        (_table$options$filter = table.options.filterFns?.[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];\n      },\n      getCanFilter: () => {\n        var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n        return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n      },\n      getCanGlobalFilter: () => {\n        var _column$columnDef$ena2, _table$options$enable3, _table$options$enable4, _table$options$getCol;\n        return ((_column$columnDef$ena2 = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena2 : true) && ((_table$options$enable3 = table.options.enableGlobalFilter) != null ? _table$options$enable3 : true) && ((_table$options$enable4 = table.options.enableFilters) != null ? _table$options$enable4 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter?.(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n      },\n      getIsFiltered: () => column.getFilterIndex() > -1,\n      getFilterValue: () => table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n      getFilterIndex: () => {\n        var _table$getState$colum;\n        return (_table$getState$colum = table.getState().columnFilters?.findIndex(d => d.id === column.id)) != null ? _table$getState$colum : -1;\n      },\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn();\n          const previousfilter = old?.find(d => d.id === column.id);\n          const newFilter = functionalUpdate(value, previousfilter ? previousfilter.value : undefined);\n\n          //\n          if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n            var _old$filter;\n            return (_old$filter = old?.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n          }\n          const newFilterObj = {\n            id: column.id,\n            value: newFilter\n          };\n          if (previousfilter) {\n            var _old$map;\n            return (_old$map = old?.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj;\n              }\n              return d;\n            })) != null ? _old$map : [];\n          }\n          if (old?.length) {\n            return [...old, newFilterObj];\n          }\n          return [newFilterObj];\n        });\n      },\n      _getFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return column._getFacetedRowModel();\n      },\n      _getFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map();\n        }\n        return column._getFacetedUniqueValues();\n      },\n      _getFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined;\n        }\n        return column._getFacetedMinMaxValues();\n      }\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    };\n  },\n\n  createRow: (row, table) => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {}\n    };\n  },\n  createTable: table => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString;\n      },\n      getGlobalFilterFn: () => {\n        var _table$options$filter2;\n        const {\n          globalFilterFn: globalFilterFn\n        } = table.options;\n        return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn() : // @ts-ignore\n        (_table$options$filter2 = table.options.filterFns?.[globalFilterFn]) != null ? _table$options$filter2 : filterFns[globalFilterFn];\n      },\n      setColumnFilters: updater => {\n        const leafColumns = table.getAllLeafColumns();\n        const updateFn = old => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id);\n            if (column) {\n              const filterFn = column.getFilterFn();\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false;\n              }\n            }\n            return true;\n          });\n        };\n        table.options.onColumnFiltersChange?.(updateFn);\n      },\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater);\n      },\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n      },\n      resetColumnFilters: defaultState => {\n        var _table$initialState$c;\n        table.setColumnFilters(defaultState ? [] : (_table$initialState$c = table.initialState?.columnFilters) != null ? _table$initialState$c : []);\n      },\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table);\n        }\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return table._getFilteredRowModel();\n      },\n      _getGlobalFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__'),\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n        return table._getGlobalFacetedRowModel();\n      },\n      _getGlobalFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map();\n        }\n        return table._getGlobalFacetedUniqueValues();\n      },\n      _getGlobalFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return;\n        }\n        return table._getGlobalFacetedMinMaxValues();\n      }\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n  let min = 0;\n  let max = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n    if (typeof value === 'number') {\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n  });\n  return (min + max) / 2;\n};\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\n\nconst Grouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString;\n        return (_toString = props.getValue()?.toString?.()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id);\n          }\n          return [...(old != null ? old : []), column.id];\n        });\n      },\n      getCanGroup: () => {\n        var _ref, _ref2, _ref3, _column$columnDef$ena;\n        return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column.accessorFn;\n      },\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id);\n      },\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup();\n        return () => {\n          if (!canGroup) return;\n          column.toggleGrouping();\n        };\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow?.getValue(column.id);\n        if (typeof value === 'number') {\n          return aggregationFns.sum;\n        }\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent;\n        }\n      },\n      getAggregationFn: () => {\n        var _table$options$aggreg;\n        if (!column) {\n          throw new Error();\n        }\n        return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : (_table$options$aggreg = table.options.aggregationFns?.[column.columnDef.aggregationFn]) != null ? _table$options$aggreg : aggregationFns[column.columnDef.aggregationFn];\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n      resetGrouping: defaultState => {\n        var _table$initialState$g;\n        table.setGrouping(defaultState ? [] : (_table$initialState$g = table.initialState?.grouping) != null ? _table$initialState$g : []);\n      },\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n        }\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel();\n        }\n        return table._getGroupedRowModel();\n      }\n    };\n  },\n  createRow: row => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {}\n    };\n  },\n  createCell: (cell, column, row, table) => {\n    return {\n      getIsGrouped: () => column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () => !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!row.subRows?.length\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns;\n  }\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\n\nconst Ordering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        var _table$initialState$c;\n        table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n      },\n      _getOrderColumnsFn: memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns = [];\n\n        // If there is no order, return the normal columns\n        if (!columnOrder?.length) {\n          orderedColumns = columns;\n        } else {\n          const columnOrderCopy = [...columnOrder];\n\n          // If there is an order, make a copy of the columns\n          const columnsCopy = [...columns];\n\n          // And make a new ordered array of the columns\n\n          // Loop over the columns and place them in order into the new array\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift();\n            const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n            }\n          }\n\n          // If there are any columns left, add them to the end\n          orderedColumns = [...orderedColumns, ...columnsCopy];\n        }\n        return orderColumns(orderedColumns, grouping, groupedColumnMode);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn'\n        // debug: () => table.options.debugAll ?? table.options.debugTable,\n      })\n    };\n  }\n};\n\n//\n\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\nconst Pagination = {\n  getInitialState: state => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetPageIndex: () => {\n        var _ref, _table$options$autoRe;\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n          return;\n        }\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n          if (queued) return;\n          queued = true;\n          table._queue(() => {\n            table.resetPageIndex();\n            queued = false;\n          });\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater = old => {\n          let newState = functionalUpdate(updater, old);\n          return newState;\n        };\n        return table.options.onPaginationChange?.(safeUpdater);\n      },\n      resetPagination: defaultState => {\n        var _table$initialState$p;\n        table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex);\n          const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex));\n          return {\n            ...old,\n            pageIndex\n          };\n        });\n      },\n      resetPageIndex: defaultState => {\n        var _table$initialState$p2;\n        table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = table.initialState?.pagination?.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n      },\n      resetPageSize: defaultState => {\n        var _table$initialState$p3;\n        table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p3 = table.initialState?.pagination?.pageSize) != null ? _table$initialState$p3 : defaultPageSize);\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n          const topRowIndex = old.pageSize * old.pageIndex;\n          const pageIndex = Math.floor(topRowIndex / pageSize);\n          return {\n            ...old,\n            pageIndex,\n            pageSize\n          };\n        });\n      },\n      setPageCount: updater => table.setPagination(old => {\n        var _table$options$pageCo;\n        let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount);\n        }\n        return {\n          ...old,\n          pageCount: newPageCount\n        };\n      }),\n      getPageOptions: memo(() => [table.getPageCount()], pageCount => {\n        let pageOptions = [];\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n        }\n        return pageOptions;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n      getCanNextPage: () => {\n        const {\n          pageIndex\n        } = table.getState().pagination;\n        const pageCount = table.getPageCount();\n        if (pageCount === -1) {\n          return true;\n        }\n        if (pageCount === 0) {\n          return false;\n        }\n        return pageIndex < pageCount - 1;\n      },\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1);\n      },\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1;\n        });\n      },\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n          table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n        }\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel();\n        }\n        return table._getPaginationRowModel();\n      },\n      getPageCount: () => {\n        var _table$options$pageCo2;\n        return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getPrePaginationRowModel().rows.length / table.getState().pagination.pageSize);\n      }\n    };\n  }\n};\n\n//\n\nconst getDefaultPinningState = () => ({\n  left: [],\n  right: []\n});\nconst Pinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      pin: position => {\n        const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n        table.setColumnPinning(old => {\n          var _old$left3, _old$right3;\n          if (position === 'right') {\n            var _old$left, _old$right;\n            return {\n              left: ((_old$left = old?.left) != null ? _old$left : []).filter(d => !columnIds?.includes(d)),\n              right: [...((_old$right = old?.right) != null ? _old$right : []).filter(d => !columnIds?.includes(d)), ...columnIds]\n            };\n          }\n          if (position === 'left') {\n            var _old$left2, _old$right2;\n            return {\n              left: [...((_old$left2 = old?.left) != null ? _old$left2 : []).filter(d => !columnIds?.includes(d)), ...columnIds],\n              right: ((_old$right2 = old?.right) != null ? _old$right2 : []).filter(d => !columnIds?.includes(d))\n            };\n          }\n          return {\n            left: ((_old$left3 = old?.left) != null ? _old$left3 : []).filter(d => !columnIds?.includes(d)),\n            right: ((_old$right3 = old?.right) != null ? _old$right3 : []).filter(d => !columnIds?.includes(d))\n          };\n        });\n      },\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns();\n        return leafColumns.some(d => {\n          var _d$columnDef$enablePi, _table$options$enable;\n          return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_table$options$enable = table.options.enablePinning) != null ? _table$options$enable : true);\n        });\n      },\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id);\n        const {\n          left,\n          right\n        } = table.getState().columnPinning;\n        const isLeft = leafColumnIds.some(d => left?.includes(d));\n        const isRight = leafColumnIds.some(d => right?.includes(d));\n        return isLeft ? 'left' : isRight ? 'right' : false;\n      },\n      getPinnedIndex: () => {\n        var _table$getState$colum;\n        const position = column.getIsPinned();\n        return position ? (_table$getState$colum = table.getState().columnPinning?.[position]?.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      getCenterVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allCells.filter(d => !leftAndRight.includes(d.column.id));\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getLeftVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left,,], (allCells, left) => {\n        const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n          ...d,\n          position: 'left'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      }),\n      getRightVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n        const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({\n          ...d,\n          position: 'right'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnPinning: updater => table.options.onColumnPinningChange?.(updater),\n      resetColumnPinning: defaultState => {\n        var _table$initialState$c;\n        return table.setColumnPinning(defaultState ? getDefaultPinningState() : (_table$initialState$c = table.initialState?.columnPinning) != null ? _table$initialState$c : getDefaultPinningState());\n      },\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning;\n        if (!position) {\n          return Boolean(pinningState.left?.length || pinningState.right?.length);\n        }\n        return Boolean(pinningState[position]?.length);\n      },\n      getLeftLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n        return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => {\n          var _table$options$debugA4;\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n        }\n      }),\n      getRightLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n        return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => {\n          var _table$options$debugA5;\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n        }\n      }),\n      getCenterLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allColumns.filter(d => !leftAndRight.includes(d.id));\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => {\n          var _table$options$debugA6;\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugColumns;\n        }\n      })\n    };\n  }\n};\n\n//\n\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    };\n  },\n\n  createTable: table => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState => {\n        var _table$initialState$r;\n        return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n      },\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n          const rowSelection = {\n            ...old\n          };\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows;\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return;\n              }\n              rowSelection[row.id] = true;\n            });\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id];\n            });\n          }\n          return rowSelection;\n        });\n      },\n      toggleAllPageRowsSelected: value => table.setRowSelection(old => {\n        const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n        const rowSelection = {\n          ...old\n        };\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table);\n        });\n        return rowSelection;\n      }),\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getFilteredSelectedRowModel: memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getFilteredSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugTable;\n        }\n      }),\n      getGroupedSelectedRowModel: memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugTable;\n        }\n      }),\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllRowsSelected = Boolean(preGroupedFlatRows.length && Object.keys(rowSelection).length);\n        if (isAllRowsSelected) {\n          if (preGroupedFlatRows.some(row => row.getCanSelect() && !rowSelection[row.id])) {\n            isAllRowsSelected = false;\n          }\n        }\n        return isAllRowsSelected;\n      },\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllPageRowsSelected = !!paginationFlatRows.length;\n        if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n          isAllPageRowsSelected = false;\n        }\n        return isAllPageRowsSelected;\n      },\n      getIsSomeRowsSelected: () => {\n        var _table$getState$rowSe;\n        const totalSelected = Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n        return totalSelected > 0 && totalSelected < table.getFilteredRowModel().flatRows.length;\n      },\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.some(d => d.getIsSelected() || d.getIsSomeSelected());\n      },\n      getToggleAllRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllRowsSelected(e.target.checked);\n        };\n      },\n      getToggleAllPageRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllPageRowsSelected(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected();\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected;\n          if (isSelected === value) {\n            return old;\n          }\n          const selectedRowIds = {\n            ...old\n          };\n          mutateRowIsSelected(selectedRowIds, row.id, value, table);\n          return selectedRowIds;\n        });\n      },\n      getIsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isRowSelected(row, rowSelection);\n      },\n      getIsSomeSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'some';\n      },\n      getIsAllSubRowsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'all';\n      },\n      getCanSelect: () => {\n        var _table$options$enable;\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row);\n        }\n        return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n      },\n      getCanSelectSubRows: () => {\n        var _table$options$enable2;\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row);\n        }\n        return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n      },\n      getCanMultiSelect: () => {\n        var _table$options$enable3;\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row);\n        }\n        return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect();\n        return e => {\n          if (!canSelect) return;\n          row.toggleSelected(e.target?.checked);\n        };\n      }\n    };\n  }\n};\nconst mutateRowIsSelected = (selectedRowIds, id, value, table) => {\n  const row = table.getRow(id);\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, table));\n  }\n};\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {};\n\n  // Filters top level and nested rows\n  const recurseRows = function (rows, depth) {\n    return rows.map(row => {\n      const isSelected = isRowSelected(row, rowSelection);\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n      if (row.subRows?.length) {\n        row = {\n          ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n  }\n  return false;\n}\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId);\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n};\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n    return String(a);\n  }\n  if (typeof a === 'string') {\n    return a;\n  }\n  return '';\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean);\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort();\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n      if (bb > aa) {\n        return -1;\n      }\n      continue;\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1;\n    }\n    if (bn > an) {\n      return -1;\n    }\n  }\n  return a.length - b.length;\n}\n\n// Exports\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\n\nconst Sorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto'\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n        let isString = false;\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id);\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime;\n          }\n          if (typeof value === 'string') {\n            isString = true;\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric;\n            }\n          }\n        }\n        if (isString) {\n          return sortingFns.text;\n        }\n        return sortingFns.basic;\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0];\n        const value = firstRow?.getValue(column.id);\n        if (typeof value === 'string') {\n          return 'asc';\n        }\n        return 'desc';\n      },\n      getSortingFn: () => {\n        var _table$options$sortin;\n        if (!column) {\n          throw new Error();\n        }\n        return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : (_table$options$sortin = table.options.sortingFns?.[column.columnDef.sortingFn]) != null ? _table$options$sortin : sortingFns[column.columnDef.sortingFn];\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder();\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id);\n          const existingIndex = old?.findIndex(d => d.id === column.id);\n          let newSorting = [];\n\n          // What should we do with this sort action?\n          let sortAction;\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc';\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'add';\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace';\n            } else if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'replace';\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove';\n              }\n            }\n          }\n          if (sortAction === 'add') {\n            var _table$options$maxMul;\n            newSorting = [...old, {\n              id: column.id,\n              desc: nextDesc\n            }];\n            // Take latest n columns\n            newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc\n                };\n              }\n              return d;\n            });\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id);\n          } else {\n            newSorting = [{\n              id: column.id,\n              desc: nextDesc\n            }];\n          }\n          return newSorting;\n        });\n      },\n      getFirstSortDir: () => {\n        var _ref, _column$columnDef$sor;\n        const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n        return sortDescFirst ? 'desc' : 'asc';\n      },\n      getNextSortingOrder: multi => {\n        var _table$options$enable, _table$options$enable2;\n        const firstSortDirection = column.getFirstSortDir();\n        const isSorted = column.getIsSorted();\n        if (!isSorted) {\n          return firstSortDirection;\n        }\n        if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && (\n        // If enableSortRemove, enable in general\n        multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false;\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc';\n      },\n      getCanSort: () => {\n        var _column$columnDef$ena, _table$options$enable3;\n        return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n      },\n      getCanMultiSort: () => {\n        var _ref2, _column$columnDef$ena2;\n        return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n      },\n      getIsSorted: () => {\n        const columnSort = table.getState().sorting?.find(d => d.id === column.id);\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n      },\n      getSortIndex: () => {\n        var _table$getState$sorti;\n        return (_table$getState$sorti = table.getState().sorting?.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti : -1;\n      },\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old => old?.length ? old.filter(d => d.id !== column.id) : []);\n      },\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort();\n        return e => {\n          if (!canSort) return;\n          e.persist?.();\n          column.toggleSorting?.(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent?.(e) : false);\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        var _table$initialState$s;\n        table.setSorting(defaultState ? [] : (_table$initialState$s = table.initialState?.sorting) != null ? _table$initialState$s : []);\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table);\n        }\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel();\n        }\n        return table._getSortedRowModel();\n      }\n    };\n  }\n};\n\n//\n\nconst Visibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value != null ? value : !column.getIsVisible()\n          }));\n        }\n      },\n      getIsVisible: () => {\n        var _table$getState$colum;\n        return (_table$getState$colum = table.getState().columnVisibility?.[column.id]) != null ? _table$getState$colum : true;\n      },\n      getCanHide: () => {\n        var _column$columnDef$ena, _table$options$enable;\n        return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n      },\n      getToggleVisibilityHandler: () => {\n        return e => {\n          column.toggleVisibility?.(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      _getAllVisibleCells: memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n        return cells.filter(cell => cell.column.getIsVisible());\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getVisibleCells: memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible?.());\n      }, {\n        key,\n        debug: () => {\n          var _table$options$debugA3;\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n        }\n      });\n    };\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns()),\n      getVisibleLeafColumns: makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns()),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns()),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns()),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns()),\n      setColumnVisibility: updater => table.options.onColumnVisibilityChange?.(updater),\n      resetColumnVisibility: defaultState => {\n        var _table$initialState$c;\n        table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n      },\n      toggleAllColumnsVisible: value => {\n        var _value;\n        value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n        table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({\n          ...obj,\n          [column.id]: !value ? !column.getCanHide?.() : value\n        }), {}));\n      },\n      getIsAllColumnsVisible: () => !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n      getIsSomeColumnsVisible: () => table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n      getToggleAllColumnsVisibilityHandler: () => {\n        return e => {\n          table.toggleAllColumnsVisible(e.target?.checked);\n        };\n      }\n    };\n  }\n};\n\nconst features = [Headers, Visibility, Ordering, Pinning, Filters, Sorting, Grouping, Expanding, Pagination, RowSelection, ColumnSizing];\n\n//\n\nfunction createTable(options) {\n  var _options$initialState;\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...');\n  }\n  let table = {\n    _features: features\n  };\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table));\n  }, {});\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n    return {\n      ...defaultOptions,\n      ...options\n    };\n  };\n  const coreInitialState = {};\n  let initialState = {\n    ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n    initialState = (_feature$getInitialSt = feature.getInitialState?.(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n      if (!queuedTimeout) {\n        queuedTimeout = true;\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange?.(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n      return (_table$options$getRow = table.options.getRowId?.(row, index, parent)) != null ? _table$options$getRow : `${parent ? [parent.id, index].join('.') : index}`;\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    getRow: id => {\n      const row = table.getRowModel().rowsById[id];\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`);\n        }\n        throw new Error();\n      }\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => {\n          const resolvedColumnDef = props.header.column.columnDef;\n          if (resolvedColumnDef.accessorKey) {\n            return resolvedColumnDef.accessorKey;\n          }\n          if (resolvedColumnDef.accessorFn) {\n            return resolvedColumnDef.id;\n          }\n          return null;\n        },\n        // footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to;\n          return (_props$renderValue$to = props.renderValue()?.toString?.()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef?.());\n        }, {}),\n        ...defaultColumn\n      };\n    }, {\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      },\n      key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef'\n    }),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          const groupingColumnDef = columnDef;\n          column.columns = groupingColumnDef.columns ? recurseColumns(groupingColumnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n      return recurseColumns(columnDefs);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    }),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n      debug: () => {\n        var _table$options$debugA3;\n        return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n      }\n    }),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n      debug: () => {\n        var _table$options$debugA4;\n        return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n      }\n    }),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n      debug: () => {\n        var _table$options$debugA5;\n        return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n      }\n    }),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`);\n        }\n        throw new Error();\n      }\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table));\n  });\n  return table;\n}\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n  const cell = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(() => [table, column, row, cell], (table, column, row, cell) => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    }), {\n      key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n      debug: () => table.options.debugAll\n    })\n  };\n  table._features.forEach(feature => {\n    Object.assign(cell, feature.createCell?.(cell, column, row, table));\n  }, {});\n  return cell;\n}\n\nconst createRow = (table, id, original, rowIndex, depth, subRows) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!column.accessorFn) {\n        return undefined;\n      }\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId];\n      }\n      const column = table.getColumn(columnId);\n      if (!column.accessorFn) {\n        return undefined;\n      }\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)];\n        return row._uniqueValuesCache[columnId];\n      }\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(row.original, rowIndex);\n      return row._uniqueValuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n      debug: () => {\n        var _table$options$debugA;\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n      }\n    }),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n      debug: () => {\n        var _table$options$debugA2;\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n      }\n    })\n  };\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    Object.assign(row, feature?.createRow?.(row, table));\n  }\n  return row;\n};\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nfunction createColumnHelper() {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function' ? {\n        ...column,\n        accessorFn: accessor\n      } : {\n        ...column,\n        accessorKey: accessor\n      };\n    },\n    display: column => column,\n    group: column => column\n  };\n}\n\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n    const accessRows = function (originalRows, depth, parent) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      const rows = [];\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parent), originalRows[i], i, depth);\n\n        // Keep track of every row in a flat array\n        rowModel.flatRows.push(row);\n        // Also keep track of every row by its ID\n        rowModel.rowsById[row.id] = row;\n        // Push table row into parent\n        rows.push(row);\n\n        // Get the original subrows\n        if (table.options.getSubRows) {\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i);\n\n          // Then recursively access them\n          if (row.originalSubRows?.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n      return rows;\n    };\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea : 100;\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    const rows = [];\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const newRow = createRow(table, row.id, row.original, row.index, row.depth);\n      newRow.columnFilters = row.columnFilters;\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n        row = newRow;\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n          continue;\n        }\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n          continue;\n        }\n      } else {\n        row = newRow;\n        if (filterRow(row)) {\n          rows.push(row);\n          newFilteredRowsById[row.id] = row;\n          newFilteredRowsById[i] = row;\n        }\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  var _table$options$maxLea2;\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n  const maxDepth = (_table$options$maxLea2 = table.options.maxLeafRowFilterDepth) != null ? _table$options$maxLea2 : 100;\n\n  // Filters top level and nested rows\n  const recurseFilterRows = function (rowsToFilter, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n    // Filter from parents downward first\n\n    const rows = [];\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth);\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1);\n          row = newRow;\n        }\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n    return rows;\n  };\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !columnFilters?.length && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n      return rowModel;\n    }\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n      const column = table.getColumn(d.id);\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Table: Could not find a column to filter with columnId: ${d.id}`);\n        }\n      }\n      const filterFn = column.getFilterFn();\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`);\n        }\n        return;\n      }\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue?.(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = columnFilters.map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue?.(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n    let currentColumnFilter;\n    let currentGlobalFilter;\n\n    // Flag the prefiltered row model with each filter state\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id;\n\n          // Tag the row with the column filter state\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id;\n          // Tag the row with the first truthy global filter state\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // Filter final rows using all of the active filters\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !columnFilters?.length && !globalFilter) {\n      return preRowModel;\n    }\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedRowModel_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => [table.getColumn(columnId).getFacetedRowModel()], facetedRowModel => {\n    let facetedUniqueValues = new Map();\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (facetedUniqueValues.has(value)) {\n          var _facetedUniqueValues$;\n          facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n        } else {\n          facetedUniqueValues.set(value, 1);\n        }\n      }\n    }\n    return facetedUniqueValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedUniqueValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => [table.getColumn(columnId).getFacetedRowModel()], facetedRowModel => {\n    const firstValue = facetedRowModel.flatRows[0]?.getUniqueValues(columnId);\n    if (typeof firstValue === 'undefined') {\n      return undefined;\n    }\n    let facetedMinMaxValues = [firstValue, firstValue];\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const values = facetedRowModel.flatRows[i].getUniqueValues(columnId);\n      for (let j = 0; j < values.length; j++) {\n        const value = values[j];\n        if (value < facetedMinMaxValues[0]) {\n          facetedMinMaxValues[0] = value;\n        } else if (value > facetedMinMaxValues[1]) {\n          facetedMinMaxValues[1] = value;\n        }\n      }\n    }\n    return facetedMinMaxValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedMinMaxValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !sorting?.length) {\n      return rowModel;\n    }\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = [];\n\n    // Filter out sortings that correspond to non existing columns\n    const availableSorting = sortingState.filter(sort => table.getColumn(sort.id).getCanSort());\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = [...rows];\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const isDesc = (_sortEntry$desc = sortEntry?.desc) != null ? _sortEntry$desc : false;\n          if (columnInfo.sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = typeof aValue === 'undefined';\n            const bUndefined = typeof bValue === 'undefined';\n            if (aUndefined || bUndefined) {\n              return aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\n            }\n          }\n\n          // This function should always return in ascending order\n          let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n            return sortInt;\n          }\n        }\n        return rowA.index - rowB.index;\n      });\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row);\n        if (row.subRows?.length) {\n          row.subRows = sortData(row.subRows);\n        }\n      });\n      return sortedData;\n    };\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      return rowModel;\n    }\n\n    // Filter the grouping list down to columns that exist\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {};\n    // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n    // Recursively group the data\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n      // Grouping depth has been been met\n      // Stop grouping and simply rewrite thd depth and row relationships\n      if (depth >= existingGrouping.length) {\n        return rows.map(row => {\n          row.depth = depth;\n          groupedFlatRows.push(row);\n          groupedRowsById[row.id] = row;\n          if (row.subRows) {\n            row.subRows = groupUpRecursively(row.subRows, depth + 1);\n          }\n          return row;\n        });\n      }\n      const columnId = existingGrouping[depth];\n\n      // Group the rows together for this level\n      const rowGroupsMap = groupBy(rows, columnId);\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = `${columnId}:${groupingValue}`;\n        id = parentId ? `${parentId}>${id}` : id;\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id);\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n              return row._valuesCache[columnId];\n            }\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            }\n\n            // Aggregate the values\n            const column = table.getColumn(columnId);\n            const aggregateFn = column.getAggregationFn();\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow;\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n    const groupedRows = groupUpRecursively(rowModel.rows, 0, '');\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow;\n      // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._queue(() => {\n        table._autoResetExpanded();\n        table._autoResetPageIndex();\n      });\n    }\n  });\n}\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`;\n    const previous = map.get(resKey);\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      previous.push(row);\n    }\n    return map;\n  }, groupMap);\n}\n\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n    if (!paginateExpandedRows) {\n      // Only expand rows at this point if they are being paginated\n      return rowModel;\n    }\n    return expandRows(rowModel);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\nfunction expandRows(rowModel) {\n  const expandedRows = [];\n  const handleRow = row => {\n    expandedRows.push(row);\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel(), table.options.paginateExpandedRows ? undefined : table.getState().expanded], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n    paginatedRowModel.flatRows = [];\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n    debug: () => {\n      var _table$options$debugA;\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\n\nexport { ColumnSizing, Expanding, Filters, Grouping, Headers, Ordering, Pagination, Pinning, RowSelection, Sorting, Visibility, aggregationFns, buildHeaderGroups, createCell, createColumn, createColumnHelper, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getPaginationRowModel, getSortedRowModel, isFunction, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns };\n//# sourceMappingURL=index.esm.js.map\n","/**\n * vue-table\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createTable } from '@tanstack/table-core';\nexport * from '@tanstack/table-core';\nimport { defineComponent, h, ref, watchEffect } from 'vue';\n\nfunction trueFn() {\n  return true;\n}\nconst $PROXY = Symbol('merge-proxy');\n\n// https://github.com/solidjs/solid/blob/c20ca4fd8c36bc0522fedb2c7f38a110b7ee2663/packages/solid/src/render/component.ts#L51-L118\nconst propTraps = {\n  get(_, property, receiver) {\n    if (property === $PROXY) return receiver;\n    return _.get(property);\n  },\n  has(_, property) {\n    return _.has(property);\n  },\n  set: trueFn,\n  deleteProperty: trueFn,\n  getOwnPropertyDescriptor(_, property) {\n    return {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return _.get(property);\n      },\n      set: trueFn,\n      deleteProperty: trueFn\n    };\n  },\n  ownKeys(_) {\n    return _.keys();\n  }\n};\nfunction resolveSource(s) {\n  return 'value' in s ? s.value : s;\n}\nfunction mergeProxy() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n  return new Proxy({\n    get(property) {\n      for (let i = sources.length - 1; i >= 0; i--) {\n        const v = resolveSource(sources[i])[property];\n        if (v !== undefined) return v;\n      }\n    },\n    has(property) {\n      for (let i = sources.length - 1; i >= 0; i--) {\n        if (property in resolveSource(sources[i])) return true;\n      }\n      return false;\n    },\n    keys() {\n      const keys = [];\n      for (let i = 0; i < sources.length; i++) keys.push(...Object.keys(resolveSource(sources[i])));\n      return [...new Set(keys)];\n    }\n  }, propTraps);\n}\n\nconst FlexRender = defineComponent({\n  props: ['render', 'props'],\n  setup: props => {\n    return () => {\n      if (typeof props.render === 'function' || typeof props.render === 'object') {\n        return h(props.render, props.props);\n      }\n      return props.render;\n    };\n  }\n});\nfunction useVueTable(options) {\n  const resolvedOptions = mergeProxy({\n    state: {},\n    // Dummy state\n    onStateChange: () => {},\n    // noop\n    renderFallbackValue: null,\n    mergeOptions(defaultOptions, options) {\n      return mergeProxy(defaultOptions, options);\n    }\n  }, options);\n  const table = createTable(resolvedOptions);\n  // can't use `reactive` because update needs to be immutable\n  const state = ref(table.initialState);\n  watchEffect(() => {\n    table.setOptions(prev => {\n      var _options$state;\n      const stateProxy = new Proxy({}, {\n        get: (_, prop) => state.value[prop]\n      });\n      return mergeProxy(prev, options, {\n        // merge the initialState and `options.state`\n        // create a new proxy on each `setOptions` call\n        // and get the value from state on each property access\n        state: mergeProxy(stateProxy, (_options$state = options.state) != null ? _options$state : {}),\n        // Similarly, we'll maintain both our internal state and any user-provided\n        // state.\n        onStateChange: updater => {\n          if (updater instanceof Function) {\n            state.value = updater(state.value);\n          } else {\n            state.value = updater;\n          }\n          options.onStateChange?.(updater);\n        }\n      });\n    });\n  });\n  return table;\n}\n\nexport { FlexRender, useVueTable };\n//# sourceMappingURL=index.esm.js.map\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","old","isFunction","d","flattenBy","arr","getChildren","flat","recurse","subArr","item","children","memo","getDeps","fn","opts","deps","result","depTime","newDeps","dep","index","resultTime","_a","depEndTime","resultEndTime","resultFpsPercentage","pad","str","num","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","accessorKey","id","accessorFn","originalRow","column","_table$options$debugA","orderColumns","leafColumns","_table$options$debugA2","obj","feature","createHeader","options","_options$id","header","leafHeaders","recurseHeader","h","Headers","allColumns","left","right","_left$map$filter","_right$map$filter","leftColumns","columnId","rightColumns","centerColumns","buildHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","_right$map$filter2","_table$options$debugA4","headerGroups","_table$options$debugA5","_table$options$debugA6","_table$options$debugA7","_table$options$debugA8","headerGroup","_table$options$debugA9","_table$options$debugA10","_table$options$debugA11","_table$options$debugA12","flatHeaders","_table$options$debugA13","_table$options$debugA14","_table$options$debugA15","center","_left$0$headers","_center$0$headers","_right$0$headers","_b","_c","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","maxDepth","findMaxDepth","columns","createHeaderGroup","headersToGroup","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","isPlaceholder","bottomHeaders","recurseHeadersForSpans","headers","colSpan","rowSpan","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","getDefaultColumnSizingInfoState","ColumnSizing","state","_column$columnDef$min","_column$columnDef$max","columnSize","position","prevSiblingColumn","_ref2","_","rest","_column$columnDef$ena","_table$options$enable","sum","_header$column$getSiz","prevSiblingHeader","canResize","e","isTouchStartEvent","startSize","columnSizingStart","clientX","updateOffset","eventType","clientXPos","newColumnSizing","_old$startOffset","_old$startSize","deltaOffset","deltaPercentage","_ref3","headerSize","onMove","onEnd","mouseEvents","touchEvents","passiveIfSupported","passiveEventSupported","defaultState","_table$initialState$c","_table$initialState$c2","_table$getHeaderGroup","_table$getLeftHeaderG","_table$getCenterHeade","_table$getRightHeader","passiveSupported","supported","noop","Expanding","registered","queued","_table$options$autoRe","expanded","_table$initialState$e","row","splitId","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","_table$options$getRow","canExpand","includesString","filterValue","search","val","testFalsey","includesStringSensitive","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","min","max","rowValue","unsafeMin","unsafeMax","parsedMin","parsedMax","temp","filterFns","Filters","value","firstRow","_table$options$filter","_table$options$enable2","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","_table$getState$colum","filterFn","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_table$options$filter2","globalFilterFn","updateFn","filter","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","uniqueCount","_columnId","aggregationFns","Grouping","props","_toString","canGroup","_table$options$aggreg","_table$initialState$g","cell","grouping","groupedColumnMode","nonGroupingColumns","col","g","Ordering","columnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","foundIndex","defaultPageIndex","defaultPageSize","getDefaultPaginationState","Pagination","safeUpdater","_table$initialState$p","pageIndex","maxPageIndex","_table$initialState$p2","_table$initialState$p3","pageSize","topRowIndex","_table$options$pageCo","newPageCount","pageCount","pageOptions","i","_table$options$pageCo2","getDefaultPinningState","Pinning","columnIds","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","_d$columnDef$enablePi","leafColumnIds","isLeft","isRight","allCells","leftAndRight","pinningState","RowSelection","_table$initialState$r","rowSelection","preGroupedFlatRows","resolvedValue","mutateRowIsSelected","rowModel","selectRowsFn","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","_table$getState$rowSe","totalSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","canSelect","newSelectedFlatRows","newSelectedRowsById","recurseRows","rows","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","toString","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","a","b","basic","aStr","bStr","aa","bb","an","bn","combo","sortingFns","Sorting","firstRows","isString","_table$options$sortin","desc","multi","nextSortingOrder","hasManualValue","existingSorting","existingIndex","newSorting","sortAction","nextDesc","_table$options$maxMul","_column$columnDef$sor","firstSortDirection","isSorted","columnSort","_table$getState$sorti","canSort","_d","_table$initialState$s","Visibility","cells","makeVisibleColumnsMethod","getColumns","_value","features","createTable","_options$initialState","defaultOptions","mergeOptions","initialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","error","newOptions","defaultColumn","_defaultColumn","_props$renderValue$to","columnDefs","recurseColumns","groupingColumnDef","flatColumns","acc","createCell","getRenderValue","_cell$getValue","createRow","original","rowIndex","subRows","_row$getValue","createColumnHelper","accessor","getCoreRowModel","data","accessRows","originalRows","trueFn","$PROXY","propTraps","property","receiver","resolveSource","s","mergeProxy","_len","sources","_key","v","keys","FlexRender","defineComponent","useVueTable","resolvedOptions","ref","watchEffect","prev","_options$state","stateProxy","prop"],"mappings":"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"}